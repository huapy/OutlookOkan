<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AlertKeyword" xml:space="preserve">
    <value>Alert keyword</value>
  </data>
  <data name="AlertKeywordInfo" xml:space="preserve">
    <value>Warning keywords</value>
  </data>
  <data name="AlertMailAddress" xml:space="preserve">
    <value>Alert Emailaddress</value>
  </data>
  <data name="AlertMailddressAndDomain" xml:space="preserve">
    <value>Alert EMailaddress / Domain</value>
  </data>
  <data name="ApplicableDestination" xml:space="preserve">
    <value>Applicable destination</value>
  </data>
  <data name="ApplicableKeywords" xml:space="preserve">
    <value>Applicable keywords</value>
  </data>
  <data name="Apply" xml:space="preserve">
    <value>Apply</value>
  </data>
  <data name="AppName" xml:space="preserve">
    <value>OutlookOkan</value>
  </data>
  <data name="Attachments" xml:space="preserve">
    <value>Attachments</value>
  </data>
  <data name="AutoAddCCorBCCByKeyword" xml:space="preserve">
    <value>Auto add CC/BCC (Keyword)</value>
  </data>
  <data name="AutoAddCCorBCCByKeywordInfo" xml:space="preserve">
    <value>Automatically add CC or BCC by keyword</value>
  </data>
  <data name="AutoAddCCorBCCByMailAddressOrDomain" xml:space="preserve">
    <value>Auto add CC/BCC (Dest)</value>
  </data>
  <data name="AutoAddCCorBCCByMailAddressOrDomainInfo" xml:space="preserve">
    <value>Automatically add CC or BCC by the Emailaddress or domain</value>
  </data>
  <data name="AutoAddDestination" xml:space="preserve">
    <value>Auto add destination</value>
  </data>
  <data name="AutoAddMailAddress" xml:space="preserve">
    <value>Auto add Emailaddress</value>
  </data>
  <data name="AutoCheckConfig" xml:space="preserve">
    <value>Auto check</value>
  </data>
  <data name="AutoCheckSameDomain" xml:space="preserve">
    <value>Automatically check the mail address (company address) in the same domain as the source address.</value>
  </data>
  <data name="CSVImportAlert" xml:space="preserve">
    <value>Don't import CSV file with wrong format.</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CCorBCC" xml:space="preserve">
    <value>CC/BCC</value>
  </data>
  <data name="ChangeLanguage" xml:space="preserve">
    <value>Change Language</value>
  </data>
  <data name="Confirmation" xml:space="preserve">
    <value>Confirmation before sending mail.</value>
  </data>
  <data name="ConfirmationMessage1" xml:space="preserve">
    <value>Do you want to send mail?</value>
  </data>
  <data name="ConfirmationMessage2" xml:space="preserve">
    <value>After checking all items, you can press send button.</value>
  </data>
  <data name="CSVExport" xml:space="preserve">
    <value>CSV Export</value>
  </data>
  <data name="CSVImport" xml:space="preserve">
    <value>CSV Import</value>
  </data>
  <data name="DestinationEmailaddress" xml:space="preserve">
    <value>Destination Emailaddress</value>
  </data>
  <data name="Domain" xml:space="preserve">
    <value>Domain</value>
  </data>
  <data name="DontShowConfirmationScreen" xml:space="preserve">
    <value>Skip the confirmation screen</value>
  </data>
  <data name="ExportFailed" xml:space="preserve">
    <value>Export Failed</value>
  </data>
  <data name="FailedToGetInformation" xml:space="preserve">
    <value>Failed to get information.</value>
  </data>
  <data name="ForgottenToAttachAlert" xml:space="preserve">
    <value>There is an attached file in the text but there is no attached file.</value>
  </data>
  <data name="General" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="HowToDaleteRow" xml:space="preserve">
    <value>* Delete row: Select the row and press the Delete key</value>
  </data>
  <data name="HTML" xml:space="preserve">
    <value>HTML</value>
  </data>
  <data name="IfAllSameDomain" xml:space="preserve">
    <value>If all destinations are in the same domain as the source address, skip the confirmation screen.</value>
  </data>
  <data name="IfAllWhite" xml:space="preserve">
    <value>If there is no check target in the destination, skip the confirmation screen.</value>
  </data>
  <data name="ImportAndExport" xml:space="preserve">
    <value>Import/Export</value>
  </data>
  <data name="ImportantAlert" xml:space="preserve">
    <value>Important Alert</value>
  </data>
  <data name="ImportFailed" xml:space="preserve">
    <value>Import Failed</value>
  </data>
  <data name="InputCCorBCC" xml:space="preserve">
    <value>Input CC or BCC</value>
  </data>
  <data name="InputDomainInfo" xml:space="preserve">
    <value>Input domain(from @)</value>
  </data>
  <data name="InputMailaddressOrDomain" xml:space="preserve">
    <value>Please Input Emailaddress or Domain.</value>
  </data>
  <data name="InputNameInfo" xml:space="preserve">
    <value>Input name(ex. Company name)</value>
  </data>
  <data name="IsAlertAddressBccAlert" xml:space="preserve">
    <value>The address/domain registered as a warning target is included in the destination (BCC). </value>
  </data>
  <data name="IsAlertAddressCcAlert" xml:space="preserve">
    <value>The address/domain registered as a warning target is included in the destination (CC). </value>
  </data>
  <data name="IsAlertAddressMaybeIrrelevant" xml:space="preserve">
    <value>This address may be irrelevant to the intended destination.</value>
  </data>
  <data name="IsAlertAddressToAlert" xml:space="preserve">
    <value>The address/domain registered as a warning target is included in the destination (To). </value>
  </data>
  <data name="IsAttachedExe" xml:space="preserve">
    <value>An executable file (.exe) is attached.</value>
  </data>
  <data name="IsBigAttachedFile" xml:space="preserve">
    <value>There are attached files of 10 Mbyte or more.</value>
  </data>
  <data name="Keyword" xml:space="preserve">
    <value>Keyword</value>
  </data>
  <data name="MailBody" xml:space="preserve">
    <value>Mail Body(Text Style)</value>
  </data>
  <data name="MailddressAndDomain" xml:space="preserve">
    <value>EMailaddress / Domain</value>
  </data>
  <data name="MailInfo" xml:space="preserve">
    <value>Mail Infomation</value>
  </data>
  <data name="MailType" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NameAndDomain" xml:space="preserve">
    <value>Name/Domain</value>
  </data>
  <data name="NoAlert" xml:space="preserve">
    <value>There is no warning.</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="RichText" xml:space="preserve">
    <value>Rich Text</value>
  </data>
  <data name="SaveSettings" xml:space="preserve">
    <value>The setting was updated.</value>
  </data>
  <data name="SelectCSVFile" xml:space="preserve">
    <value>Please select a CSV file.</value>
  </data>
  <data name="SelectSaveDestination" xml:space="preserve">
    <value>Please select a save destination.</value>
  </data>
  <data name="Send" xml:space="preserve">
    <value>Send</value>
  </data>
  <data name="Sender" xml:space="preserve">
    <value>Sender</value>
  </data>
  <data name="SendingForbid" xml:space="preserve">
    <value>Sending forbid</value>
  </data>
  <data name="SendingForbidInfo" xml:space="preserve">
    <value>EMail sending is forbidden when checked</value>
  </data>
  <data name="SettingExample" xml:space="preserve">
    <value>Setting Example</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Subject" xml:space="preserve">
    <value>Subject</value>
  </data>
  <data name="SuccessfulExport" xml:space="preserve">
    <value>Successful Export</value>
  </data>
  <data name="SuccessfulImport" xml:space="preserve">
    <value>Successful Import</value>
  </data>
  <data name="Text" xml:space="preserve">
    <value>Plain Text</value>
  </data>
  <data name="Unknown" xml:space="preserve">
    <value>Unknown</value>
  </data>
  <data name="WarningText" xml:space="preserve">
    <value>Warning text</value>
  </data>
  <data name="WarningTextInfo" xml:space="preserve">
    <value>Warning text on confirmation</value>
  </data>
  <data name="WhiteList" xml:space="preserve">
    <value>WhiteList</value>
  </data>
  <data name="CompanyName" xml:space="preserve">
    <value>Noraneko Inc.</value>
  </data>
  <data name="Copyright" xml:space="preserve">
    <value>Copyright (C) 2019 Noraneko Inc.</value>
  </data>
  <data name="Version" xml:space="preserve">
    <value>Version 2.3.3</value>
  </data>
  <data name="VersionInfo" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="SendingForbidAddress" xml:space="preserve">
    <value>Mail Sending forbid Email address.</value>
  </data>
  <data name="SettingExampleAlertKeyword" xml:space="preserve">
    <value>Keywords: confidential
Warning text: Contains confidential word.

Register keywords to be warned and their warnings.</value>
  </data>
  <data name="SettingExampleAlertMailAddress" xml:space="preserve">
    <value>EMailAddress: info@noraneko.co.jp
or
Domain: @noraneko.co.jp

Register address or domain.
When registering, a warning will be displayed when sending to that address.</value>
  </data>
  <data name="SettingExampleAutoAddCCorBCCByKeyword" xml:space="preserve">
    <value>Type: CC or BCC
Keywords: confidential
Address: boss@noraneko.co.jp

When the keyword is included in the mail,
The address specified for CC or BCC is automatically added.</value>
  </data>
  <data name="SettingExampleAutoAddCCorBCCByMailAddressOrDomain" xml:space="preserve">
    <value>Type: CC or BCC
To: warning@xxxxxxx.com
Address: boss@noraneko.co.jp

When sending mail to registered destinations and domains,
The address specified for CC or BCC is automatically added.</value>
  </data>
  <data name="SettingExampleNameAndDomain" xml:space="preserve">
    <value>Name: Noraneko Inc
Domain: @noraneko.co.jp

Register the name (company name etc.) and domain.</value>
  </data>
  <data name="SettingExampleWhiteList" xml:space="preserve">
    <value>EMailAddress: info@noraneko.co.jp
or
Domain: @noraneko.co.jp

Register EMailAddress or domain.</value>
  </data>
  <data name="ChangeRibbonLanguageInfo" xml:space="preserve">
    <value>The display language of the ribbon (menu) is updated when Outlook is restarted.</value>
  </data>
  <data name="IsCanNotShowConfirmation" xml:space="preserve">
    <value>Can't show the confirmation</value>
  </data>
  <data name="SendMailConfirmation" xml:space="preserve">
    <value>Do you want to send mail?</value>
  </data>
  <data name="IsShowConfirmationToMultipleDomain" xml:space="preserve">
    <value>If the recipient contains multiple external domains, show the confirmation screen. (Don't skip confirmation screen.)</value>
  </data>
  <data name="IsSkipConfirmation" xml:space="preserve">
    <value>Skip confirmation</value>
  </data>
  <data name="IsSkipConfirmationInfo" xml:space="preserve">
    <value>When checked, skip the confirmation screen.</value>
  </data>
  <data name="SentOnBehalf" xml:space="preserve">
    <value>Send on behalf or Send As.</value>
  </data>
  <data name="DeferredDelivery" xml:space="preserve">
    <value>Delay Delivery</value>
  </data>
  <data name="DeferredDeliveryMinutes" xml:space="preserve">
    <value>Deferred Delivery time (min)</value>
  </data>
  <data name="EnableForgottenToAttachAlert" xml:space="preserve">
    <value>If there is a sentence attached file in the text and there is no attached file, warn about that.</value>
  </data>
  <data name="DeferredDeliveryEmailAddressOrDomainInfo" xml:space="preserve">
    <value>Please Input Emailaddress or Domain.</value>
  </data>
  <data name="DeferredDeliveryTime" xml:space="preserve">
    <value>Dealy Time(min)</value>
  </data>
  <data name="InputDeferredDeliveryTime" xml:space="preserve">
    <value>Please enter the time (min) to delay delivery.</value>
  </data>
  <data name="SettingExampleDeferredDelivery" xml:space="preserve">
    <value>EMailAddress: info@noraneko.co.jp
or
Domain: @noraneko.co.jp

Register EMailAddress or domain.
And enter the time (min) to delay delivery.

* If you register only @, you can register the standard delay time of all mails.

* When multiple conditions are met, the longest delay time is adopted.</value>
  </data>
  <data name="ContactGroup" xml:space="preserve">
    <value>Contact Group</value>
  </data>
  <data name="AutoCheckMembersAddress" xml:space="preserve">
    <value>The member's address will be checked automatically.</value>
  </data>
  <data name="GetMembersOfTheContactGroup" xml:space="preserve">
    <value>Get members of an Contact Group.</value>
  </data>
  <data name="GetMembersOfTheExDistList" xml:space="preserve">
    <value>Get members of an Exchange distribution list. (It may take a long time.)</value>
  </data>
  <data name="GetMembersOfTheList" xml:space="preserve">
    <value>Get members of an Exchange distribution list or an Contact Group</value>
  </data>
  <data name="CanGetNewVersion" xml:space="preserve">
    <value>You can get the new version.
Do you want to download it?</value>
  </data>
  <data name="CheckNewVersion" xml:space="preserve">
    <value>Check for Updates</value>
  </data>
  <data name="YouHaveLatest" xml:space="preserve">
    <value>You have the latest version.</value>
  </data>
  <data name="AutoAddCCorBCCByAttachedFile" xml:space="preserve">
    <value>Auto add CC/BCC (AttachedFile)</value>
  </data>
  <data name="IsNotTreatedAsAttachmentsAtHtmlEmbeddedFiles" xml:space="preserve">
    <value>HTML mail embedded files are not treated as attachments.</value>
  </data>
  <data name="SettingExampleAutoAddCCorBCCByAttachedFile" xml:space="preserve">
    <value>Type: CC or BCC
Address: boss@noraneko.co.jp

When you send an email with a file attached, 
The address specified for CC or BCC is automatically added.</value>
  </data>
</root>